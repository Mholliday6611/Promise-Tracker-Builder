<div class="container">
  Fill out Survey page
  <div>
  	<h1 data-bind="text: title"></h1>
  		<center>
  		<div id="surveyContainer" >
		  	<div data-bind="foreach: inputs">
		  		<div class="questionContainer" data-bind=" style: { opacity: $parent.currentQuestion()==$index() ? 1 : 0.3 }, attr: { id:$index()}">
		  			<div  data-bind=" style: { marginTop: input_type=='location' ? '' : '125px'}">
				  		<h4 data-bind="text: ($index() + 1) + '. ' + label"></h4>
				  		<div data-bind="if: input_type=='text'">
				  			<textarea data-bind="value: $parent.surveyAnswers[$index()].value, event:{change: $parent.next}" type="textarea"></textarea>
				  		</div>

				  		<div data-bind="if: input_type=='select1'">
				  			<select data-bind="optionsCaption:'---', options: options, value: $parent.surveyAnswers[$index()].value, event:{change: $parent.next}">
				  			</select>
				  		</div>

				  		<div data-bind="if: input_type=='image'">

				  			<div class="image-upload">
							    <label for="files">
							        <img class="thumb" src="https://cdn4.iconfinder.com/data/icons/vectory-bonus-3/40/button_add-512.png"/>
							    </label>

							    <input style="display: none;" data-bind="event:{change: $parent.fileSelect}, value: $parent.surveyAnswers[$index()].value,"  id="files" name="files[]" type="file" multiple accept="image/*" />
							</div>
				  			
							<output id="list"></output>

							<div data-bind="foreach: $parent.files"> 
							    <span data-bind ="text: name"></span>: <img class="thumb" data-bind = "attr: {'src': src, 'title': name}"/>
							</div>

				  		</div>

				  		<div data-bind="if: input_type=='location'">
				  			<div data-bind="style:{width:'300px',height:'300px'},map: $parent.position"></div>

				  		<form data-bind ="submit: $parent.getAddressLatLng">
				  			<input type="text" data-bind="value: $parent.address"> <input type="submit" name="">
				  		</form>
				  		</div>
			  		</div>
			  	</div>
		  	</div>
	  		<button data-bind="click: result">Click here</button>
	  	</div>

  	<div class="navigation">
	  	<button data-bind="click: previous">^</button>
	  	<button data-bind="click: next">v</button>
	  	<div>
	  		<h1 class="progressTracker" data-bind="text:progress() +'/' + inputs.length"></h1>
	  	</div>
	</div>
		</center>
  </div>
</div>

<script type="text/javascript">
  PT.retrieveSurveyDefinition(<%= @code %>, function(data){
  	//Data to send out
  	console.log(data)
  	var surveyAnswers =[]
  	for(i=0;i<data.inputs.length;i++){
  		surveyAnswers.push({
  		  	id: data.inputs[i].id,
  		  	value : ko.observable(''),
  		  	input_type: data.inputs[i].input_type
  		  })
  	}

  	var currentPosition = ko.observable({
  		lat:ko.observable(0), 
		lng:ko.observable(0)
  	})

  	var checkProgress = function(){
  		var counter = 0
  		for(var i = 0; i< viewModel.surveyAnswers.length; i++){
  			console.log(viewModel.surveyAnswers[i].value())
  			if(viewModel.surveyAnswers[i].value() != "" && viewModel.surveyAnswers[i].value() != undefined ){
  				counter ++
  			}
  		}
  		console.log(counter)
  		viewModel.progress(counter)
  	}

	var viewModel = {
	  		title : data.title,
	  		inputs : data.inputs,
	  		id: data.id,
	  		surveyAnswers : surveyAnswers,
	  		address: ko.observable(),
	  		progress: ko.observable(0),

	  		result: function(){
	  			var id = this.id
	  			var answers = ko.toJS(this.surveyAnswers)
	  			var data = {
	  				installation_id:"",
	  				timestamp:new Date(),
	  				locationStamp: {
	  					lat:"",
	  					lon:""
	  				},
	  				survey_id: id,
	  				answers: answers
	  			}
	  			console.log(data)
	  			$.ajax({
	  				url: "http://localhost:9292/responses",
	  				type: 'post', 
	  				data: {response: JSON.stringify(data)},
	  				dataType: 'json',
	  				headers: { Authorization : 'goodaccesskeycode'},

	  				success : function(returnedData) {

	  					console.log(returnedData)
	  					var reader = new FileReader();
	  					for(i=0;i< viewModel.files().length; i++){
	  						let formData = new FormData();
	  						formData.append('file',viewModel.files()[i].file)
	  						formData.append('id', returnedData.payload.id)
	  						formData.append('survey_id',viewModel.id)
	  						formData.append('input_id',viewModel.files()[i].input_id)

	  						console.log(formData)
	  						let data = {	
			  						file: viewModel.files()[i].file,

		  							id: returnedData.payload.id, 
		  							survey_id: viewModel.id, 
		  							input_id: viewModel.files()[i].input_id,
			  				}
		  				  	$.ajax({
			  				url: "http://localhost:9292/upload_image",
			  				type: 'post', 
			  				data: formData,
			  				contentType: false,
  							processData: false,
			  				headers: { Authorization : 'goodaccesskeycode'},
			  				success : function(response) {
			  				  	console.log(response)   
			  				}
			  			})
	  				}  
	  			}})

	  		},    

		    files :  ko.observableArray([]),

		    fileSelect: function (elemet,event) {
		        var files =  event.target.files;// FileList object
		        // Loop through the FileList and render image files as thumbnails.
		        for (var i = 0, f; f = files[i]; i++) {
		          console.log(f)
		          // Only process image files.
		          if (!f.type.match('image.*')) {
		            continue;
		          }          

		          var reader = new FileReader();

		          // Closure to capture the file information.
		          reader.onload = (function(theFile) {

		              return function(e) {
		                  viewModel.files.push(new FileModel(escape(theFile.name),e.target.result,elemet.id,theFile));
		              };                            
		          })(f);
		          // Read in the image file as a data URL.
		          reader.readAsDataURL(f);
		        }
		        viewModel.next()
		    },

	  		currentQuestion: ko.observable(0),

	  		next: function(){
	  			var previousVal = viewModel.currentQuestion();

	  			if(previousVal == viewModel.inputs.length-1){
	  				return
	  			}else{
	  				viewModel.currentQuestion(previousVal + 1)
	  			}
	  			viewModel.checkProgress()
	  			window.location.hash = "#"+viewModel.currentQuestion()
	  		},
	  		previous: function(){
	  			var previousVal = viewModel.currentQuestion();
	  			if(previousVal == 0){
	  				return
	  			}else{
	  				viewModel.currentQuestion(previousVal - 1)
	  			}
	  			viewModel.checkProgress()
	  			window.location.hash = "#"+viewModel.currentQuestion()
	  		},
	  		checkProgress: checkProgress,
	  		position : currentPosition,
	  		getAddressLatLng: function(){
				geocoder = new google.maps.Geocoder();

				geocoder.geocode({'address': viewModel.address()}, function(results,status){
					if(status == google.maps.GeocoderStatus.OK){
						console.log(results[0].geometry.location.lat())
						viewModel.position({
				 		 	lat:ko.observable(results[0].geometry.location.lat()), 
				 		 	lng:ko.observable(results[0].geometry.location.lng())
				 		 })
					}
					else {
		            alert( 'Geocode was not successful for the following reason: ' + status );
		        	}
				})
			}
	  	}

	var FileModel= function (name, src, id,file) {
	    var self = this;
	    this.name = name;
	    this.src = src ;
	    this.input_id = id;
	    this.survey_id = viewModel.id;
	    this.file = file;
	};

	navigator.geolocation.getCurrentPosition(
		function(position){
		 	viewModel.position({
		 		 	lat:ko.observable(position.coords.latitude), 
		 		 	lng:ko.observable(position.coords.longitude)
		 		 })
		    
		}
	);

	ko.bindingHandlers.map = {
  		init: function(element, valueAccessor,allBindingsAccessor,input){
  			console.log("HERERERE")
  			console.log(input)

  			var mapObj = ko.utils.unwrapObservable(valueAccessor());

  			var latLng = new google.maps.LatLng(
  				ko.utils.unwrapObservable(mapObj.lat),
  				ko.utils.unwrapObservable(mapObj.lng))

  			var mapOptions = {
  				center: latLng,
  				zoom: 10,
  			}

  			mapObj.googleMap = new google.maps.Map(element, mapOptions)
  			mapObj.marker = new google.maps.Marker({position: latLng,
  				map: mapObj.googleMap,
  				draggable:true,
  				animation: google.maps.Animation.DROP
  			})

  			viewModel.marker = mapObj.marker
  			viewModel.map = mapObj.googleMap

  			google.maps.event.addListener(mapObj.marker,'dragend',function(){
  				viewModel.marker = this

  				var index = viewModel.surveyAnswers.findIndex(function(i){
  					return i.id == input.id
  				})

  				viewModel.surveyAnswers[index].value({
  					lat:viewModel.marker.getPosition().lat(),
  					lon:viewModel.marker.getPosition().lat()
  				})
  				console.log(viewModel)
  			})
  		},
	  	update: function(element,valueAccessor,allBindingsAccessor,input){
	  		var mapObj = ko.utils.unwrapObservable(allBindingsAccessor().map);
	  		var latLng = new google.maps.LatLng(
  				ko.utils.unwrapObservable(mapObj.lat),
  				ko.utils.unwrapObservable(mapObj.lng))
	  		console.log(latLng)
	  		console.log(viewModel.map)
	  		console.log(viewModel.marker)
	  		viewModel.marker.setPosition(latLng)
	  		viewModel.map.setCenter(latLng)

	  		var index = viewModel.surveyAnswers.findIndex(function(i){
  					return i.id == input.id
  				})
  				
  			viewModel.surveyAnswers[index].value({
  					lat:viewModel.marker.getPosition().lat(),
  					lon:viewModel.marker.getPosition().lat()
  				})
  			viewModel.checkProgress()
	  		}
  	}

  	ko.applyBindings(viewModel)

  	for(i=0;i<surveyAnswers.length;i++){
  		this["waypoint"+i] = new Waypoint({
  		 	element: document.getElementById(i),
  		 	handler: function(){
  		 		viewModel.currentQuestion(parseInt(this.element.id))
  		 		console.log(viewModel.currentQuestion())
  		 	},
  		 	offset:'30%'
  		 })
  	}
	
  	
  });
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAYrqOLLhjp7hWkDBf7NmrVxw-IPt3p-e0">
</script>
