PT = PT || {};

PT.aggregatUrl = "<%= ENV['AGGREGATOR_URL'] %>";

PT.retrieveResponses = function(surveyCode, callBack){
  var url = PT.aggregatUrl + "/surveys/" + surveyCode + "/survey-with-responses";  
  $.get(url, function(data){
    PT.surveyDefinition = data.payload.survey;
    PT.responses = data.payload.responses
    callBack(data.payload);
  });
};

PT.renderStatusBars = function(containerId, currentResponseCount, targetResponseCount){
  $(containerId).highcharts({
    chart: {
      type: "bar",
      margin: 0
    },
    title: {
      text: ""
    },
    global: {
      timezoneOffset: 300
    },
    xAxis: {
      lineColor: 'transparent',
      labels: {
        enabled: false
      }
    },
    yAxis: {
      gridLineColor: 'transparent',
      labels: {
        enabled: false
      }
    },
    tooltip: {
      valueSuffix: " " + I18n.t("campaigns.collect.responses.counting.other"),
      headerFormat: ""
    },
    legend: {
      enabled: false
    },
    plotOptions: {
      bar: {
        dataLabels: {
          enabled: true
        }
      }
    },
    credits: {
      enabled: false
    },
    series: [
      {
        name: I18n.t("campaigns.collect.target"),
        data: [targetResponseCount],
        pointPadding: 0,
        groupPadding: 0,
        color: "#5fb2a6",
      },
      {
        name: I18n.t("campaigns.collect.current"),
        data: [currentResponseCount],
        pointPadding: 0,
        groupPadding: 0,
        color: "#66c6ba"
      }
    ],
    exporting: {
      enabled: false
    }
  });
};

PT.renderActivityGraph = function(responses, containerId){
  var $container = $(containerId);
  var responsesByDay = PT.groupResponsesBySubmissionDay(PT.responses).reverse();
  var array = responsesByDay.map(function(day){
    var date = new Date(parseInt(day.key));
    return [Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()), day.values.length]
  });

  if(array.length == 0){
    // Insert today's date if no responses found
    var today = new Date();
    array = [[Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate()), null]]
  } else {
    var firstDate = array[0][0];
    var lastDate = array[array.length - 1][0];
    var numDays = (lastDate - firstDate) / 86400000;

    // Insert 0 value for dates with no data
    for(i = 0; i < numDays; i++){
      if(array[i + 1][0] - array[i][0] > 86400000){
        array.splice(i + 1, 0, [array[i][0] + 86400000, 0]);
      }
    }
  }

  $container.highcharts({
    chart: {
      zoomType: "spline",
    },
    exporting: {
      enabled: false
    },
    title: {
      text: ""
    },
    xAxis: {
      type: "datetime",
      minRange: 5 * 24 * 3600000,
      minTickInterval: 24 * 3600000,
      tickmarkPlacement: 'on',
      gridLineWidth: 1,
      tickColor: "#f1f2f1",
      gridLineColor: "#f1f2f1",
      lineColor: "#f1f2f1",
      startOnTick: true,
      endOnTick: true,
      dateTimeLabelFormats: {
        day: "%e %b"
      }
    },
    yAxis: {
      title: {
        text: ""
      },
      labels: {
        formatter: function () {
          return this.value;
        }
      },
      min: 0,
      minRange: 4,
      gridLineColor: "#f1f2f1"
    },
    legend: {
      enabled: false
    },
    tooltip: {
      formatter: function () {
        return Highcharts.dateFormat("%e %b", new Date(this.x)) + "<br>" +  this.y + " " + I18n.t("campaigns.collect.responses.counting.other");
      }
    },
    plotOptions: {
      spline: {
        marker: {
          enabled: true
        }
      },
      series: {
        color: "#66c6ba"
      }
    },
    credits: {
      enabled: false
    },
    series: [{
      name: "",
      data: array
    }]
  });
};

PT.renderResponseTable = function(survey, responses){
  var $table = $("#response-table");
  var sorted = responses.sort(function(a,b){
    return b.timestamp - a.timestamp;
  });

  PT.renderResponseRows(sorted.slice(0, 10), $table);
  $("#response-view").append(HandlebarsTemplates["response_view"](survey));
  responses.length > 0 ? PT.viewResponse(sorted[0]) : false;

  if(responses.length > 10){
    $("#view-more").on("click", function(){
      PT.loadMoreResponses(sorted);
    });
  } else {
    $("#view-more").hide();
  }
};

PT.renderResponseRows = function(responses, $table){
  responses.forEach(function(response){
    var $row = $(HandlebarsTemplates["response_table_row"](response));
    $row.on("click", function(){
      PT.viewResponse(response);
    });
    $table.append($row);
  });
}

PT.formatAnswer = function(answer){
  if(answer.value){
    switch(answer.input_type){
      case "location":
        return answer.value.lat ? answer.value.lat + ", " + answer.value.lon : "";
        break;
      case "select":
        return answer.value.join(", ");
        break;
      case "image":
        return "<img src='" + answer.value + "'/>";
      default:
        return answer.value;
        break;
    };
  } else {
    return "";
  }
};

PT.viewResponse = function(response){
  $("#response-table tr").removeClass("active");
  $("#response-table tr#" + response.id).addClass("active");
  response.answers.forEach(function(answer){
    $("#" + answer.id + " .answer").html(PT.formatAnswer(answer));
  });
};

PT.loadMoreResponses = function(sortedResponses){
  var $table = $("#response-table");
  var currentLength = $table.find(".response").length;

  PT.renderResponseRows(sortedResponses.slice(currentLength, currentLength + 10), $table);

  if(currentLength + 10 >= sortedResponses.length){
    $("#view-more").hide();
  }
};

PT.groupResponsesBySubmissionDay = function(responses){
  return d3.nest()
    .key(function(d) {
      return new Date(d.timestamp).setHours(0, 0, 0, 0);
    })
    .entries(responses);
};
